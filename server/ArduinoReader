#!/bin/python

import time
import threading
import sys
import serial
import re
import time
from pylab import *


class ArduinoReader(threading.Thread):
	"Reads data from Arduino on serial"

	def __init__(self,serialport,interval):
		threading.Thread.__init__(self)

		self.datain = []
		self.interval = interval
		self.tmpCounter = 0
		self.dataIndex=0
		self.killed = False
		
		baud = 9600
		self.ser = serial.Serial(serialport,baud)


	#Polls the serial port for sensor data
	def run(self):
		while not self.killed:
			#print "Tick "+str(self.tmpCounter)
			self.dataIndex += 1
			
			#print "-"
			self.datain.append(self.getSensorData())
			#print "_"
			
			time.sleep(self.interval);

	#Gets the actual sensor data
	def getSensorData(self):
		#TODO do comms with serial, dummy data for now
		#self.tmpCounter += 1
		#return self.tmpCounter-1
		self.ser.write('0')
		r = str(int(time.time()))+":"+re.sub('\\r\\n','',self.ser.readline())

		return r.split(":")

	def kill(self):
		self.killed = True
		sys.exit()

	def getLast(self, lastn):
		return self.datain[max(self.dataIndex-lastn,0):]
	


t = ArduinoReader('/dev/ttyACM0',1)
t.start()

#ion()


while True:
	x = raw_input()
	if (x == "q") or (x == "x"):
		t.kill()
		break
	else:
		tmp=[]
		ldr=[]
		ts=[]
		for i in t.getLast(100):
			ts.append(i[0])
			tmp.append(i[2])
			ldr.append(i[4])

		X = range(len(t.getLast(100)))
		lineTmp, = plot(X,tmp)
		lineLdr, = plot(X,ldr)
		
		#savefig('foo.png')
		show()
		#draw()

		#print t.getLast(5)


#for i in range(1,5) :
#	print t.datain
#	time.sleep(3)

#t.kill()
